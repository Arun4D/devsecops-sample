name: E2E_Build
on:
  push:
    branches:
      - main
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  build:
    name: Build and analyze
    runs-on: ubuntu-latest
    environment: dev
    outputs:
      backend_sonar_status: ${{ steps.sonar_backend_qg.outputs.quality-gate-status }}
      frontend_sonar_status: ${{ steps.sonar_frontend_qg.outputs.quality-gate-status }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Backend setup and build
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: 'zulu'
      
      - name: Cache SonarQube packages
        uses: actions/cache@v4
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
          restore-keys: ${{ runner.os }}-gradle

      - name: Install SonarScanner
        run: |
          curl -sSLo sonar-scanner.zip https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-5.0.1.3006-linux.zip
          unzip sonar-scanner.zip
          sudo mv sonar-scanner-5.0.1.3006-linux /opt/sonar-scanner
          echo "/opt/sonar-scanner/bin" >> $GITHUB_PATH

      - name: Build Backend
        working-directory: apps/backend/kpi-visualization
        run: |
          chmod +x ../gradlew
          ../gradlew clean build test --info

      - name: SonarQube Scan (Backend)
        id: sonar_backend
        working-directory: apps/backend/kpi-visualization
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: https://sonarcloud.io
        run: sonar-scanner -Dproject.settings=sonar-project.properties

      - name: Wait for SonarQube Analysis
        id: sonar_backend_qg
        run: |
          sleep 20  # Wait for the scan to process (adjust as needed)
          PROJECT_KEY="Arun4D_devsecops-sample"  # Replace with your actual project key
          SONAR_STATUS=$(curl -s -u "${{ secrets.SONAR_TOKEN }}:" \
            "https://sonarcloud.io/api/qualitygates/project_status?projectKey=$PROJECT_KEY" \
            | jq -r '.projectStatus.status')
          echo "Backend SonarQube Quality Gate Status: $SONAR_STATUS"
          echo "quality-gate-status=$SONAR_STATUS" >> $GITHUB_OUTPUT

    
      # Frontend setup and build
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Cache npm dependencies
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: ${{ runner.os }}-node
          
      - name: Install and build frontend
        working-directory: apps/frontend/kpi-dashboard
        run: |
          npm install
          npm run build

      # Frontend SonarQube Scan
      - name: SonarQube Scan (Frontend)
        id: sonar_frontend
        uses: SonarSource/sonarqube-scan-action@v5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: https://sonarcloud.io
        with:
          projectBaseDir: apps/frontend/kpi-dashboard

      - name: Wait for SonarQube Analysis
        id: sonar_frontend_qg
        run: |
          sleep 20  # Wait for the scan to process (adjust as needed)
          PROJECT_KEY="arun4d_kpi-dashboard"  # Replace with your actual project key
          SONAR_STATUS=$(curl -s -u "${{ secrets.SONAR_TOKEN }}:" \
            "https://sonarcloud.io/api/qualitygates/project_status?projectKey=$PROJECT_KEY" \
            | jq -r '.projectStatus.status')
          echo "Frontend SonarQube Quality Gate Status: $SONAR_STATUS"
          echo "quality-gate-status=$SONAR_STATUS" >> $GITHUB_OUTPUT

  docker_build:
    name: Build, Scan, and Push Docker Images
    runs-on: ubuntu-latest
    environment: dev
    needs: build
    if: needs.build.outputs.backend_sonar_status == 'OK' && needs.build.outputs.frontend_sonar_status == 'OK'
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Build Backend Docker Image
      - name: Build Backend Docker Image
        working-directory: apps/backend
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/kpi-visualization:latest .

      # Build Frontend Docker Image
      - name: Build Frontend Docker Image
        working-directory: apps/frontend
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/kpi-dashboard:latest .

      # Install Trivy
      - name: Install Trivy
        run: |
          sudo apt-get install wget -y
          wget https://github.com/aquasecurity/trivy/releases/latest/download/trivy_Linux-64bit.tar.gz
          tar zxvf trivy_Linux-64bit.tar.gz
          sudo mv trivy /usr/local/bin/

      # Trivy Scan Backend
      - name: Trivy Scan Backend
        run: |
          trivy image --exit-code 1 --severity HIGH,CRITICAL ${{ secrets.DOCKER_USERNAME }}/kpi-visualization:latest

      # Trivy Scan Frontend
      - name: Trivy Scan Frontend
        run: |
          trivy image --exit-code 1 --severity HIGH,CRITICAL ${{ secrets.DOCKER_USERNAME }}/kpi-dashboard:latest

      # Push Backend Docker Image
      - name: Push Backend Docker Image
        run: |
          docker push ${{ secrets.DOCKER_USERNAME }}/kpi-visualization:latest

      # Push Frontend Docker Image
      - name: Push Frontend Docker Image
        run: |
          docker push ${{ secrets.DOCKER_USERNAME }}/kpi-dashboard:latest
