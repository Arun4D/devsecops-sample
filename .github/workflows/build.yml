name: E2E_Build
on:
  #push:
  #  branches:
  #    - main
  pull_request:
    types: [opened, synchronize, reopened]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment (e.g., dev, staging, prod)'
        required: true
        default: dev
      location:
        description: 'Location of resource deployment  (e.g., eastus, westus)'
        required: true
        default: eastus

env:
  TF_VERSION: '1.5.6' # Adjust the version as per your requirement
  WORKING_DIRECTORY: './ci/terraform/env/dev' # Path to your Terraform configuration directory
  LOCATION: ${{ github.event.inputs.location }}
  RESOURCE_GROUP_NAME: "terraform-backend-rg"
  STORAGE_ACCOUNT_NAME: "tfbackendmodule"
  CONTAINER_NAME: "tfstate"
  AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
  AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
  SSH_PUBLIC_KEY: ${{ secrets.SSH_PUBLIC_KEY }}
  
permissions:
  id-token: write
  contents: read 

jobs:
  build:
    name: Code Build and analyze
    runs-on: ubuntu-latest
    environment: dev
    outputs:
      backend_sonar_status: ${{ steps.sonar_backend_qg.outputs.quality-gate-status }}
      frontend_sonar_status: ${{ steps.sonar_frontend_qg.outputs.quality-gate-status }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Backend setup and build
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: 'zulu'
      
      - name: Cache SonarQube packages
        uses: actions/cache@v4
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
          restore-keys: ${{ runner.os }}-gradle

      - name: Install Sonar Scanner
        run: |
          wget -O sonar-scanner.zip "https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-5.0.1.3006-linux.zip"
          unzip sonar-scanner.zip
          sudo mv sonar-scanner-* /opt/sonar-scanner
          echo "/opt/sonar-scanner/bin" >> $GITHUB_PATH  # Persist PATH across steps

      - name: Build Backend
        working-directory: apps/backend/kpi-visualization
        run: |
          chmod +x ../gradlew
          ../gradlew clean build test --info

      - name: SonarQube Scan (Backend)
        id: sonar_backend
        working-directory: apps/backend/kpi-visualization
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: https://sonarcloud.io
        run: |
          export PATH=$PATH:/opt/sonar-scanner/bin  # Ensure SonarScanner is in PATH
          sonar-scanner -Dproject.settings=sonar-project.properties


      - name: Wait for SonarQube Analysis
        id: sonar_backend_qg
        run: |
          sleep 20  # Wait for the scan to process (adjust as needed)
          PROJECT_KEY="Arun4D_devsecops-sample"  # Replace with your actual project key
          SONAR_STATUS=$(curl -s -u "${{ secrets.SONAR_TOKEN }}:" \
            "https://sonarcloud.io/api/qualitygates/project_status?projectKey=$PROJECT_KEY" \
            | jq -r '.projectStatus.status')
          echo "Backend SonarQube Quality Gate Status: $SONAR_STATUS"
          echo "quality-gate-status=$SONAR_STATUS" >> $GITHUB_OUTPUT

    
      # Frontend setup and build
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Cache npm dependencies
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: ${{ runner.os }}-node
          
      - name: Install and build frontend
        working-directory: apps/frontend/kpi-dashboard
        run: |
          npm install
          npm run build


      - name: Run Unit Tests and Generate Coverage
        working-directory: apps/frontend/kpi-dashboard
        run: |
          npm run test -- --code-coverage --browsers=ChromeHeadless --no-watch
          ls coverage/lcov.info
          cat coverage/lcov.info

      # Frontend SonarQube Scan
      - name: SonarQube Scan (Frontend)
        id: sonar_frontend
        uses: SonarSource/sonarqube-scan-action@v5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: https://sonarcloud.io
        with:
          projectBaseDir: apps/frontend/kpi-dashboard
          args: >
            -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info
            -Dsonar.typescript.lcov.reportPaths=coverage/lcov.info

      - name: Wait for SonarQube Analysis
        id: sonar_frontend_qg
        run: |
          sleep 20  # Wait for the scan to process (adjust as needed)
          PROJECT_KEY="arun4d_kpi-dashboard"  # Replace with your actual project key
          SONAR_STATUS=$(curl -s -u "${{ secrets.SONAR_TOKEN }}:" \
            "https://sonarcloud.io/api/qualitygates/project_status?projectKey=$PROJECT_KEY" \
            | jq -r '.projectStatus.status')
          echo "Frontend SonarQube Quality Gate Status: $SONAR_STATUS"
          echo "quality-gate-status=$SONAR_STATUS" >> $GITHUB_OUTPUT

  docker_build:
    name: Docker Images Build, Scan, and Push
    runs-on: ubuntu-latest
    environment: dev
    needs: build
    if: needs.build.outputs.backend_sonar_status == 'OK' && needs.build.outputs.frontend_sonar_status == 'OK'
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Build Backend Docker Image
      - name: Build Backend Docker Image
        working-directory: apps/backend
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/kpi-visualization:latest .

      # Build Frontend Docker Image
      - name: Build Frontend Docker Image
        working-directory: apps/frontend
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/kpi-dashboard:latest .

      # Install Trivy
      - name: Install Trivy via APT
        run: |
          sudo apt-get update
          sudo apt-get install -y wget apt-transport-https gnupg
          wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo tee /etc/apt/trusted.gpg.d/trivy.asc
          echo "deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/trivy.list
          sudo apt-get update
          sudo apt-get install -y trivy


      # Trivy Scan Backend
      - name: Trivy Scan Backend
        run: |
          trivy image --exit-code 1 --severity HIGH,CRITICAL ${{ secrets.DOCKER_USERNAME }}/kpi-visualization:latest

      # Trivy Scan Frontend
      - name: Trivy Scan Frontend
        run: |
          trivy image --exit-code 1 --severity HIGH,CRITICAL ${{ secrets.DOCKER_USERNAME }}/kpi-dashboard:latest

      # Push Backend Docker Image
      - name: Push Backend Docker Image
        run: |
          docker push ${{ secrets.DOCKER_USERNAME }}/kpi-visualization:latest

      # Push Frontend Docker Image
      - name: Push Frontend Docker Image
        run: |
          docker push ${{ secrets.DOCKER_USERNAME }}/kpi-dashboard:latest

  Dev_Deploy_validate:
    name: Validate Dev Env Deployment
    runs-on: ubuntu-latest
    environment: ${{ github.event.pull_request.base.ref == 'main' && 'prod' || 'dev' }}
    needs: docker_build 
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: ${{ env.TF_VERSION }}
        
    - name: Authenticate to Azure
      uses: azure/login@v1
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

    - name: Create Azure Storage Account for Backend
      run: |
        RESOURCE_GROUP_NAME="${{ env.RESOURCE_GROUP_NAME }}"
        STORAGE_ACCOUNT_NAME="${{ env.STORAGE_ACCOUNT_NAME }}"
        CONTAINER_NAME="${{ env.CONTAINER_NAME }}"
        LOCATION="${{ env.LOCATION }}"

        az group create --name $RESOURCE_GROUP_NAME --location $LOCATION
        az storage account create --resource-group $RESOURCE_GROUP_NAME --name $STORAGE_ACCOUNT_NAME --sku Standard_LRS --encryption-services blob
        ACCOUNT_KEY=$(az storage account keys list --resource-group $RESOURCE_GROUP_NAME --account-name $STORAGE_ACCOUNT_NAME --query '[0].value' --output tsv)
        az storage container create --name $CONTAINER_NAME --account-name $STORAGE_ACCOUNT_NAME --account-key $ACCOUNT_KEY

        echo "##vso[task.setvariable variable=STORAGE_ACCOUNT_NAME]$STORAGE_ACCOUNT_NAME"
        echo "##vso[task.setvariable variable=CONTAINER_NAME]$CONTAINER_NAME"
        echo "##vso[task.setvariable variable=ACCOUNT_KEY]$ACCOUNT_KEY"

        echo "STORAGE_ACCOUNT_NAME=$STORAGE_ACCOUNT_NAME" >> $GITHUB_ENV
        echo "CONTAINER_NAME=$CONTAINER_NAME" >> $GITHUB_ENV
        echo "ACCOUNT_KEY=$ACCOUNT_KEY" >> $GITHUB_ENV

    - name: Terraform Init
      working-directory: ${{ env.WORKING_DIRECTORY }}
      env:
        ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
        ARM_CLIENT_SECRET: ${{ secrets.AZURE_SECRET }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      run: terraform init -backend-config="storage_account_name=${{ env.STORAGE_ACCOUNT_NAME }}" -backend-config="container_name=${{ env.CONTAINER_NAME }}" -backend-config="resource_group_name=${{ env.RESOURCE_GROUP_NAME }}" -backend-config="key=terraform.tfstate"

    - name: Terraform Validate
      working-directory: ${{ env.WORKING_DIRECTORY }}
      run: terraform validate

    - name: Write SSH Private Key
      run: |
        mkdir -p /tmp/.ssh
        echo "${{ secrets.SSH_PRIVATE_KEY }}" > /tmp/.ssh/id_rsa
        chmod 600 /tmp/.ssh/id_rsa

    - name: Write SSH Public Key
      run: |
        printf "%s\n" "${{ secrets.SSH_PUBLIC_KEY }}" | tr -d '\r' > /tmp/.ssh/id_rsa.pub
        chmod 644 /tmp/.ssh/id_rsa.pub

    - name: Generate Terraform Variables File
      working-directory: ${{ env.WORKING_DIRECTORY }}
      run: |
        echo 'ssh_public_key = "'$(cat /tmp/.ssh/id_rsa.pub)'"' > terraform.auto.tfvars

    - name: Set SSH Key Permissions
      run: |
        chmod 600 /tmp/.ssh/id_rsa
        chmod 644 /tmp/.ssh/id_rsa.pub
        
    - name: Terraform Plan
      working-directory: ${{ env.WORKING_DIRECTORY }}
      env:
        ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
        ARM_CLIENT_SECRET: ${{ secrets.AZURE_SECRET }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      run: |
        terraform plan -out main.tfplan  -var-file="./../../config/global.tfvars" -var-file="./../../config/dev.tfvars" 
        terraform show -json main.tfplan > terraform.json

    # Install and Run Tfsec for Static Code Analysis
    - name: Run Tfsec
      uses: aquasecurity/tfsec-action@v1.0.0
      with:
        working-directory: ${{ env.WORKING_DIRECTORY }}

    # Install and Run Checkov for Compliance Checks
    - name: Run Checkov
      uses: bridgecrewio/checkov-action@master
      with:
        directory: ${{ env.WORKING_DIRECTORY }}

    # Install Open Policy Agent (OPA)
    - name: Install Open Policy Agent
      run: |
        curl -L -o opa https://openpolicyagent.org/downloads/latest/opa_linux_amd64
        chmod +x opa
        sudo mv opa /usr/local/bin/

    # Run OPA Policy Checks
    - name: Run OPA Policy Check
      working-directory: ${{ env.WORKING_DIRECTORY }}
      run: |
        opa fmt policy.rego
        opa check policy.rego
        opa eval --input terraform.json --data policy.rego "data"

    # Clean up SSH keys
    - name: Clean Up SSH Keys
      run: |
        rm -rf /tmp/.ssh/id_rsa /tmp/.ssh/id_rsa.pub

  Dev_Deploy:
    name: Dev Env Deployment
    runs-on: ubuntu-latest
    environment: ${{ github.event.pull_request.base.ref == 'main' && 'prod' || 'dev' }}
    needs: Dev_Deploy_validate 
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: ${{ env.TF_VERSION }}
        
    - name: Authenticate to Azure
      uses: azure/login@v1
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

    - name: Create Azure Storage Account for Backend
      run: |
        RESOURCE_GROUP_NAME="${{ env.RESOURCE_GROUP_NAME }}"
        STORAGE_ACCOUNT_NAME="${{ env.STORAGE_ACCOUNT_NAME }}"
        CONTAINER_NAME="${{ env.CONTAINER_NAME }}"
        LOCATION="${{ env.LOCATION }}"

        az group create --name $RESOURCE_GROUP_NAME --location $LOCATION
        az storage account create --resource-group $RESOURCE_GROUP_NAME --name $STORAGE_ACCOUNT_NAME --sku Standard_LRS --encryption-services blob
        ACCOUNT_KEY=$(az storage account keys list --resource-group $RESOURCE_GROUP_NAME --account-name $STORAGE_ACCOUNT_NAME --query '[0].value' --output tsv)
        az storage container create --name $CONTAINER_NAME --account-name $STORAGE_ACCOUNT_NAME --account-key $ACCOUNT_KEY

        echo "##vso[task.setvariable variable=STORAGE_ACCOUNT_NAME]$STORAGE_ACCOUNT_NAME"
        echo "##vso[task.setvariable variable=CONTAINER_NAME]$CONTAINER_NAME"
        echo "##vso[task.setvariable variable=ACCOUNT_KEY]$ACCOUNT_KEY"

        echo "STORAGE_ACCOUNT_NAME=$STORAGE_ACCOUNT_NAME" >> $GITHUB_ENV
        echo "CONTAINER_NAME=$CONTAINER_NAME" >> $GITHUB_ENV
        echo "ACCOUNT_KEY=$ACCOUNT_KEY" >> $GITHUB_ENV

    - name: Terraform Init
      working-directory: ${{ env.WORKING_DIRECTORY }}
      env:
        ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
        ARM_CLIENT_SECRET: ${{ secrets.AZURE_SECRET }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      run: terraform init -backend-config="storage_account_name=${{ env.STORAGE_ACCOUNT_NAME }}" -backend-config="container_name=${{ env.CONTAINER_NAME }}" -backend-config="resource_group_name=${{ env.RESOURCE_GROUP_NAME }}" -backend-config="key=terraform.tfstate"

    - name: Terraform Validate
      working-directory: ${{ env.WORKING_DIRECTORY }}
      run: terraform validate

    - name: Write SSH Private Key
      run: |
        mkdir -p /tmp/.ssh
        echo "${{ secrets.SSH_PRIVATE_KEY }}" > /tmp/.ssh/id_rsa
        chmod 600 /tmp/.ssh/id_rsa

    - name: Write SSH Public Key
      run: |
        printf "%s\n" "${{ secrets.SSH_PUBLIC_KEY }}" | tr -d '\r' > /tmp/.ssh/id_rsa.pub
        chmod 644 /tmp/.ssh/id_rsa.pub

    - name: Generate Terraform Variables File
      working-directory: ${{ env.WORKING_DIRECTORY }}
      run: |
        echo 'ssh_public_key = "'$(cat /tmp/.ssh/id_rsa.pub)'"' > terraform.auto.tfvars

    - name: Set SSH Key Permissions
      run: |
        chmod 600 /tmp/.ssh/id_rsa
        chmod 644 /tmp/.ssh/id_rsa.pub
        
    - name: Terraform Plan
      working-directory: ${{ env.WORKING_DIRECTORY }}
      env:
        ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
        ARM_CLIENT_SECRET: ${{ secrets.AZURE_SECRET }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      run: |
        terraform plan -out main.tfplan  -var-file="./../../config/global.tfvars" -var-file="./../../config/dev.tfvars" 
        terraform show -json main.tfplan > terraform.json

    - name: Terraform Apply
      working-directory: ${{ env.WORKING_DIRECTORY }}
      env:
        ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
        ARM_CLIENT_SECRET: ${{ secrets.AZURE_SECRET }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      run: terraform apply main.tfplan

    # Clean up SSH keys
    - name: Clean Up SSH Keys
      run: |
        rm -rf /tmp/.ssh/id_rsa /tmp/.ssh/id_rsa.pub